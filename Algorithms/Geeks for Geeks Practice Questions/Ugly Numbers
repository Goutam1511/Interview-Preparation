#include <bits/stdc++.h>
using namespace std;

/*
Write a program to find the n-th ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 

Example:

Input: n = 10
Output: 12
Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

Note:  
    1 is typically treated as an ugly number.
    n does not exceed 1690.

Solution Approach : An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number.
The key is how to maintain the order of the ugly numbers. We can find that every subsequence is the ugly-sequence
itself (1, 2, 3, 4, 5, â€¦) multiply 2, 3, 5. Then we use similar merge method as merge sort, to get every ugly
number from the three subsequence. Every step we choose the smallest one, and move one step after.

1 Declare an array for ugly numbers:  ugly[n]
2 Initialize first ugly no:  ugly[0] = 1
3 Initialize three array index variables i2, i3, i5 to point to 
   1st element of the ugly array: 
        i2 = i3 = i5 =0; 
4 Initialize 3 choices for the next ugly no:
         next_mulitple_of_2 = ugly[i2]*2;
         next_mulitple_of_3 = ugly[i3]*3
         next_mulitple_of_5 = ugly[i5]*5;
5 Now go in a loop to fill all ugly numbers till 150:
For (i = 1; i < 150; i++ ) 
{
    next_ugly_no  = Min(next_mulitple_of_2,
                        next_mulitple_of_3,
                        next_mulitple_of_5); 

    ugly[i] =  next_ugly_no       
    if (next_ugly_no  == next_mulitple_of_2) 
    {             
        i2 = i2 + 1;        
        next_mulitple_of_2 = ugly[i2]*2;
    } 
    if (next_ugly_no  == next_mulitple_of_3) 
    {             
        i3 = i3 + 1;        
        next_mulitple_of_3 = ugly[i3]*3;
     }            
     if (next_ugly_no  == next_mulitple_of_5)
     {    
        i5 = i5 + 1;        
        next_mulitple_of_5 = ugly[i5]*5;
     } 
     
}
6.return next_ugly_no

DRY RUN :
initialize
   ugly[] =  | 1 |
   i2 =  i3 = i5 = 0;

First iteration
   ugly[1] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
            = Min(2, 3, 5)
            = 2
   ugly[] =  | 1 | 2 |
   i2 = 1,  i3 = i5 = 0  (i2 got incremented ) 

Second iteration
    ugly[2] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
             = Min(4, 3, 5)
             = 3
    ugly[] =  | 1 | 2 | 3 |
    i2 = 1,  i3 =  1, i5 = 0  (i3 got incremented ) 

Third iteration
    ugly[3] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)= Min(4, 6, 5)
             = 4
    ugly[] =  | 1 | 2 | 3 |  4 |
    i2 = 2,  i3 =  1, i5 = 0  (i2 got incremented )

Fourth iteration
    ugly[4] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
              = Min(6, 6, 5)
              = 5
    ugly[] =  | 1 | 2 | 3 |  4 | 5 |
    i2 = 2,  i3 =  1, i5 = 1  (i5 got incremented )

Fifth iteration
    ugly[4] = Min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5)
              = Min(6, 6, 10)
              = 6
    ugly[] =  | 1 | 2 | 3 |  4 | 5 | 6 |
    i2 = 3,  i3 =  2, i5 = 1  (i2 and i3 got incremented )

Will continue same way till I < 150

Time & Space Complexity : O(n)
*/

class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int> ugly(n);
        int i2 = 0, i3 = 0, i5 = 0, count = 1, next_ugly_no;
        int next_mulitple_of_2, next_mulitple_of_3, next_mulitple_of_5;
        
        ugly[0] = 1;
        next_mulitple_of_2 = ugly[i2] * 2;
        next_mulitple_of_3 = ugly[i3] * 3;
        next_mulitple_of_5 = ugly[i5] * 5;
        
        while (count < n) {
            next_ugly_no  = min(next_mulitple_of_2,
                                min(next_mulitple_of_3,
                                    next_mulitple_of_5));
            ugly[count] =  next_ugly_no;
            if (next_ugly_no  == next_mulitple_of_2) {             
                i2 = i2 + 1; 
                next_mulitple_of_2 = ugly[i2] * 2;
            }
            if (next_ugly_no  == next_mulitple_of_3) {             
                i3 = i3 + 1;
                next_mulitple_of_3 = ugly[i3] * 3;
            }            
            if (next_ugly_no  == next_mulitple_of_5) {    
                i5 = i5 + 1;
                next_mulitple_of_5 = ugly[i5] * 5;
            } 
            count++;
        }
        
        return ugly[n - 1];
    }
};

int main() {
	// Ugly Numbers LeetCode
	Solution s;
	s.nthUglyNumber(10);
	return 0;
}
