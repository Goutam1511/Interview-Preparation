/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]

Solution : Apply BFS levelwise - instead of going on queueing the nodes one after another and popping consecutively, maintain a queue or vector where all nodes at one level
will be present, insert their childs in next level in another queue or vector, add the current queue/vector to result vector, assign the other vector/queue to be the next
vector/queue for consideration. Repeat this until the current queue size is empty denoting no more nodes left. Reverse the result vector to have the traversal in bottom-up.

Time Complexity : O(n) for BFS
Space Complexity :2*n -> 2 vectors/queue for each level -> O(n)
*/

/* Definition for a binary tree node. */
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
 
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res; 
        vector<TreeNode*> q;
        
        if (root == NULL) {
            return res;
        }
        q.push_back(root); //Push the root in current queue
        res.push_back(vector<int> (1, root->val)); //Insert the root in result
        
        while (q.size()) { //While current queue is not empty
            vector<int> v; //The queue/vector for next level node values
            vector<TreeNode*> nextlev; //The queue/vector for next level nodes
            for (int i = 0; i < q.size(); i++) { //For each node in current queue, add their children in nextlev queue
                if (q[i]->left) {
                    nextlev.push_back(q[i]->left);
                    v.push_back(q[i]->left->val); //Also add the values for easy addition in result vector
                }
                if (q[i]->right) {
                    nextlev.push_back(q[i]->right);
                    v.push_back(q[i]->right->val);
                }
            }
            if (v.size()) { //If there is child in nextlevel
                res.push_back(v); //Add them to result
            }
            q = nextlev; //Assign the next level as current level
        }
        reverse(res.begin(), res.end()); //Reverse for bottom-up traversal
        return res;
    }
};
